import {
  Contract,
  ContractFactory,
  ContractTransaction,
  EventFilter,
  Signer
} from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedFunctionDescription,
  TypedEventDescription
} from ".";

interface MaliciousChestInterface extends Interface {
  functions: {
    maliciousPush: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;

    maliciousPull: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;

    pushAttackHook: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;

    emptyHook: TypedFunctionDescription<{ encode([]: []): string }>;

    pullAttackHook: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;
  };
  events: {};
}

export interface MaliciousChest {
  interface: MaliciousChestInterface;
  connect(signerOrProvider: Signer | Provider | string): MaliciousChest;
  attach(addressOrName: string): MaliciousChest;
  deployed(): Promise<MaliciousChest>;
  on(event: EventFilter | string, listener: Listener): MaliciousChest;
  once(event: EventFilter | string, listener: Listener): MaliciousChest;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MaliciousChest;
  removeAllListeners(eventName: EventFilter | string): MaliciousChest;
  removeListener(eventName: any, listener: Listener): MaliciousChest;

  maliciousPush(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  maliciousPull(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  pushAttackHook(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  emptyHook(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  pullAttackHook(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  estimate: {
    maliciousPush(count: BigNumberish): Promise<BigNumber>;
    maliciousPull(count: BigNumberish): Promise<BigNumber>;
    pushAttackHook(count: BigNumberish): Promise<BigNumber>;
    emptyHook(): Promise<BigNumber>;
    pullAttackHook(count: BigNumberish): Promise<BigNumber>;
  };
}

export class MaliciousChest extends Contract {
  public static at(signer: Signer, addressOrName: string): MaliciousChest {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.attach(addressOrName) as unknown) as MaliciousChest;
  }

  public static deploy(
    signer: Signer,
    _escrow: string,
    _asset: string
  ): Promise<MaliciousChest> {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.deploy(_escrow, _asset) as unknown) as Promise<
      MaliciousChest
    >;
  }

  public static ABI =
    '[{"inputs":[{"internalType":"contract IEscrow","name":"_escrow","type":"address"},{"internalType":"contract TestERC20Token","name":"_asset","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"maliciousPush","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"maliciousPull","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"pushAttackHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"emptyHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"pullAttackHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
  public static Bytecode =
    "0x608060405234801561001057600080fd5b50604051610a9e380380610a9e83398101604081905261002f91610071565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100e4565b805161006b816100cd565b92915050565b6000806040838503121561008457600080fd5b60006100908585610060565b92505060206100a185828601610060565b9150509250929050565b600061006b826100c1565b600061006b826100ab565b6001600160a01b031690565b6100d6816100b6565b81146100e157600080fd5b50565b6109ab806100f36000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806325c4cc881461005c5780635205fbd6146100715780639193164314610084578063d0020d8514610097578063e35a7a10146100aa575b600080fd5b61006f61006a366004610659565b6100b2565b005b61006f61007f366004610659565b61018e565b61006f610092366004610659565b61034c565b61006f6100a5366004610659565b6104a6565b61006f61052a565b6100ba6105b4565b6100c382610556565b90506060826040516024016100d891906108c7565b60408051601f198184030181529181526020820180516001600160e01b0316632902fdeb60e11b1790526000549051636a8573f560e11b81529192506001600160a01b03169063d50ae7ea9061013690859030908690600401610895565b602060405180830381600087803b15801561015057600080fd5b505af1158015610164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101889190810190610677565b50505050565b6000546001600160a01b031633146101c15760405162461bcd60e51b81526004016101b890610865565b60405180910390fd5b6101c96105b4565b6101d282610556565b6001546040516340c10f1960e01b81529192506001600160a01b0316906340c10f1990610205903090869060040161084a565b600060405180830381600087803b15801561021f57600080fd5b505af1158015610233573d6000803e3d6000fd5b505060015460005460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350610270929091169060001990600401610828565b602060405180830381600087803b15801561028a57600080fd5b505af115801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102c29190810190610633565b50600054604051634e344acb60e01b81526001600160a01b0390911690634e344acb906102f59084903090600401610875565b602060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103479190810190610677565b505050565b6000546001600160a01b031633146103765760405162461bcd60e51b81526004016101b890610865565b61037e6105b4565b61038782610556565b6040805160048082526024820183526020820180516001600160e01b0316630e35a7a160e41b1790526000549251636a8573f560e11b815293945090926001600160a01b039092169163d50ae7ea916103e69186913091879101610895565b602060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104389190810190610677565b506001546000546040516340c10f1960e01b81526001600160a01b03928316926340c10f199261046f92911690879060040161084a565b600060405180830381600087803b15801561048957600080fd5b505af115801561049d573d6000803e3d6000fd5b50505050505050565b6104ae6105b4565b6104b782610556565b90506060826040516024016104cc91906108c7565b60408051601f198184030181529181526020820180516001600160e01b0316639193164360e01b1790526000549051636a8573f560e11b81529192506001600160a01b03169063d50ae7ea9061013690859030908690600401610895565b6000546001600160a01b031633146105545760405162461bcd60e51b81526004016101b890610865565b565b61055e6105b4565b506040805160e081018252338082526020808301919091526001546001600160a01b031682840152606082019390935260006080820181905260a08201819052825190815292830190915260c081019190915290565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b805161061781610948565b92915050565b80356106178161095f565b80516106178161095f565b60006020828403121561064557600080fd5b6000610651848461060c565b949350505050565b60006020828403121561066b57600080fd5b6000610651848461061d565b60006020828403121561068957600080fd5b60006106518484610628565b60006106a1838361081f565b505060200190565b6106b2816108e8565b82525050565b60006106c3826108db565b6106cd81856108df565b93506106d8836108d5565b8060005b838110156107065781516106f08882610695565b97506106fb836108d5565b9250506001016106dc565b509495945050505050565b600061071c826108db565b61072681856108df565b9350610736818560208601610912565b61073f8161093e565b9093019392505050565b6106b281610907565b600061075f601b836108df565b7f6d7573742062652074686520657363726f7720636f6e74726163740000000000815260200192915050565b805160009060e084019061079f85826106a9565b5060208301516107b260208601826106a9565b5060408301516107c560408601826106a9565b5060608301516107d8606086018261081f565b5060808301516107eb608086018261081f565b5060a08301516107fe60a086018261081f565b5060c083015184820360c086015261081682826106b8565b95945050505050565b6106b281610904565b6040810161083682856106a9565b6108436020830184610749565b9392505050565b6040810161085882856106a9565b610843602083018461081f565b6020808252810161061781610752565b60408082528101610886818561078b565b905061084360208301846106a9565b606080825281016108a6818661078b565b90506108b560208301856106a9565b81810360408301526108168184610711565b60208101610617828461081f565b60200190565b5190565b90815260200190565b6000610617826108f8565b151590565b6001600160a01b031690565b90565b600061061782610904565b60005b8381101561092d578181015183820152602001610915565b838111156101885750506000910152565b601f01601f191690565b610951816108f3565b811461095c57600080fd5b50565b6109518161090456fea365627a7a72315820907316ef949d2816ce798df7285db8fd67b5a63cb9275b582b6bae9c04998db16c6578706572696d656e74616cf564736f6c634300050b0040";
}
