import {
  Contract,
  ContractFactory,
  ContractTransaction,
  EventFilter,
  Signer
} from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedFunctionDescription,
  TypedEventDescription
} from ".";

interface TestCreditCardPackInterface extends Interface {
  functions: {
    purchases: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    purchaseERC20: TypedFunctionDescription<{
      encode([user, count, duration]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    purchaseERC721: TypedFunctionDescription<{
      encode([user, count, duration]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    erc721Hook: TypedFunctionDescription<{
      encode([purchaseID]: [BigNumberish]): string;
    }>;

    erc20Hook: TypedFunctionDescription<{
      encode([purchaseID]: [BigNumberish]): string;
    }>;
  };
  events: {};
}

export interface TestCreditCardPack {
  interface: TestCreditCardPackInterface;
  connect(signerOrProvider: Signer | Provider | string): TestCreditCardPack;
  attach(addressOrName: string): TestCreditCardPack;
  deployed(): Promise<TestCreditCardPack>;
  on(event: EventFilter | string, listener: Listener): TestCreditCardPack;
  once(event: EventFilter | string, listener: Listener): TestCreditCardPack;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TestCreditCardPack;
  removeAllListeners(eventName: EventFilter | string): TestCreditCardPack;
  removeListener(eventName: any, listener: Listener): TestCreditCardPack;

  purchases(arg0: BigNumberish): Promise<BigNumber>;
  purchaseERC20(
    user: string,
    count: BigNumberish,
    duration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  purchaseERC721(
    user: string,
    count: BigNumberish,
    duration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  erc721Hook(
    purchaseID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  erc20Hook(
    purchaseID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  estimate: {
    purchases(arg0: BigNumberish): Promise<BigNumber>;
    purchaseERC20(
      user: string,
      count: BigNumberish,
      duration: BigNumberish
    ): Promise<BigNumber>;
    purchaseERC721(
      user: string,
      count: BigNumberish,
      duration: BigNumberish
    ): Promise<BigNumber>;
    erc721Hook(purchaseID: BigNumberish): Promise<BigNumber>;
    erc20Hook(purchaseID: BigNumberish): Promise<BigNumber>;
  };
}

export class TestCreditCardPack extends Contract {
  public static at(signer: Signer, addressOrName: string): TestCreditCardPack {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.attach(addressOrName) as unknown) as TestCreditCardPack;
  }

  public static deploy(
    signer: Signer,
    _escrow: string,
    _erc20: string,
    _erc721: string
  ): Promise<TestCreditCardPack> {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.deploy(_escrow, _erc20, _erc721) as unknown) as Promise<
      TestCreditCardPack
    >;
  }

  public static ABI =
    '[{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"purchases","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ICreditCardEscrow","name":"_escrow","type":"address"},{"internalType":"contract TestERC20Token","name":"_erc20","type":"address"},{"internalType":"contract TestERC721Token","name":"_erc721","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"count","type":"uint256"},{"internalType":"uint64","name":"duration","type":"uint64"}],"name":"purchaseERC20","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"count","type":"uint256"},{"internalType":"uint64","name":"duration","type":"uint64"}],"name":"purchaseERC721","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"purchaseID","type":"uint256"}],"name":"erc721Hook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"purchaseID","type":"uint256"}],"name":"erc20Hook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
  public static Bytecode =
    "0x608060405234801561001057600080fd5b50604051610c45380380610c4583398101604081905261002f91610082565b600080546001600160a01b039485166001600160a01b031991821617909155600180549385169382169390931790925560028054919093169116179055610108565b805161007c816100f1565b92915050565b60008060006060848603121561009757600080fd5b60006100a38686610071565b93505060206100b486828701610071565b92505060406100c586828701610071565b9150509250925092565b600061007c826100e5565b600061007c826100cf565b6001600160a01b031690565b6100fa816100da565b811461010557600080fd5b50565b610b2e806101176000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063327e76f51461005c5780633e8b0e49146100715780635d591036146100845780638392fe3114610097578063c4856573146100c0575b600080fd5b61006f61006a36600461076c565b6100d3565b005b61006f61007f36600461076c565b61023c565b61006f6100923660046107df565b610428565b6100aa6100a53660046107df565b610593565b6040516100b79190610a21565b60405180910390f35b61006f6100ce3660046107df565b6105b1565b6100db6106c4565b506040805160e0810182526001600160a01b038581168252600080548216602080850191909152600180549093168486015260608085018890526080850183905260a085018390528551838152808301875260c086015285519182018652878252600380549485018155909252517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b830155925191929091610181908390602401610a21565b60408051601f198184030181529181526020820180516001600160e01b031663c485657360e01b1790526000549051630b425bb760e11b81529192506001600160a01b031690631684b76e906101e1908690309086908a906004016109e0565b602060405180830381600087803b1580156101fb57600080fd5b505af115801561020f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061023391908101906107fd565b50505050505050565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561028157600080fd5b505afa158015610295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102b991908101906107fd565b90508281016102c66106c4565b506040805160e0810182526001600160a01b0387811682526000805482166020808501919091526002549092168385015260608084018290526080840187905260a084018690528451828152808401865260c08501528451928301855288835260038054600181018255925291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b820155925191929161036b908390602401610a21565b60408051601f198184030181529181526020820180516001600160e01b0316632eac881b60e11b1790526000549051630b425bb760e11b81529192506001600160a01b031690631684b76e906103cb908690309086908c906004016109e0565b602060405180830381600087803b1580156103e557600080fd5b505af11580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061041d91908101906107fd565b505050505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663d16352af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047757600080fd5b505afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104af91908101906107b9565b9050336001600160a01b038216146104e25760405162461bcd60e51b81526004016104d9906109d0565b60405180910390fd5b6104ea61071c565b600383815481106104f757fe5b600091825260209182902060408051938401815291015480835260025491516340c10f1960e01b81529293506001600160a01b03909116916340c10f1991610544918691906004016109ae565b600060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050506003838154811061058357fe5b6000918252602082200155505050565b600381815481106105a057fe5b600091825260209091200154905081565b60008060009054906101000a90046001600160a01b03166001600160a01b031663d16352af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061063891908101906107b9565b9050336001600160a01b038216146106625760405162461bcd60e51b81526004016104d9906109d0565b61066a61071c565b6003838154811061067757fe5b600091825260209182902060408051938401815291015480835260015491516340c10f1960e01b81529293506001600160a01b03909116916340c10f1991610544918691906004016109ae565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6040518060200160405280600081525090565b803561073a81610ab9565b92915050565b805161073a81610ad0565b803561073a81610ad9565b805161073a81610ad9565b803561073a81610ae2565b60008060006060848603121561078157600080fd5b600061078d868661072f565b935050602061079e8682870161074b565b92505060406107af86828701610761565b9150509250925092565b6000602082840312156107cb57600080fd5b60006107d78484610740565b949350505050565b6000602082840312156107f157600080fd5b60006107d7848461074b565b60006020828403121561080f57600080fd5b60006107d78484610756565b6000610827838361099c565b505060200190565b61083881610a42565b82525050565b600061084982610a35565b6108538185610a39565b935061085e83610a2f565b8060005b8381101561088c578151610876888261081b565b975061088183610a2f565b925050600101610862565b509495945050505050565b60006108a282610a35565b6108ac8185610a39565b93506108bc818560208601610a7f565b6108c581610aaf565b9093019392505050565b60006108dc601b83610a39565b7f6d7573742062652074686520657363726f7720636f6e74726163740000000000815260200192915050565b805160009060e084019061091c858261082f565b50602083015161092f602086018261082f565b506040830151610942604086018261082f565b506060830151610955606086018261099c565b506080830151610968608086018261099c565b5060a083015161097b60a086018261099c565b5060c083015184820360c0860152610993828261083e565b95945050505050565b61083881610a64565b61083881610a74565b604081016109bc828561082f565b6109c9602083018461099c565b9392505050565b6020808252810161073a816108cf565b608080825281016109f18187610908565b9050610a00602083018661082f565b8181036040830152610a128185610897565b905061099360608301846109a5565b6020810161073a828461099c565b60200190565b5190565b90815260200190565b600061073a82610a58565b600061073a82610a42565b6001600160a01b031690565b90565b67ffffffffffffffff1690565b600061073a82610a67565b60005b83811015610a9a578181015183820152602001610a82565b83811115610aa9576000848401525b50505050565b601f01601f191690565b610ac281610a42565b8114610acd57600080fd5b50565b610ac281610a4d565b610ac281610a64565b610ac281610a6756fea365627a7a7231582001d1d9ae7e9b885036f415f73c7c06bb8701fbd3de0ca7cf6f19e752c12b7d166c6578706572696d656e74616cf564736f6c634300050b0040";
}
