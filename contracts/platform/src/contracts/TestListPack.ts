import {
  Contract,
  ContractFactory,
  ContractTransaction,
  EventFilter,
  Signer
} from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedFunctionDescription,
  TypedEventDescription
} from ".";

interface TestListPackInterface extends Interface {
  functions: {
    purchases: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    purchase: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;

    escrowHook: TypedFunctionDescription<{
      encode([purchaseID]: [BigNumberish]): string;
    }>;
  };
  events: {};
}

export interface TestListPack {
  interface: TestListPackInterface;
  connect(signerOrProvider: Signer | Provider | string): TestListPack;
  attach(addressOrName: string): TestListPack;
  deployed(): Promise<TestListPack>;
  on(event: EventFilter | string, listener: Listener): TestListPack;
  once(event: EventFilter | string, listener: Listener): TestListPack;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TestListPack;
  removeAllListeners(eventName: EventFilter | string): TestListPack;
  removeListener(eventName: any, listener: Listener): TestListPack;

  purchases(arg0: BigNumberish): Promise<BigNumber>;
  purchase(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  escrowHook(
    purchaseID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  estimate: {
    purchases(arg0: BigNumberish): Promise<BigNumber>;
    purchase(count: BigNumberish): Promise<BigNumber>;
    escrowHook(purchaseID: BigNumberish): Promise<BigNumber>;
  };
}

export class TestListPack extends Contract {
  public static at(signer: Signer, addressOrName: string): TestListPack {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.attach(addressOrName) as unknown) as TestListPack;
  }

  public static deploy(
    signer: Signer,
    _escrow: string,
    _asset: string
  ): Promise<TestListPack> {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.deploy(_escrow, _asset) as unknown) as Promise<
      TestListPack
    >;
  }

  public static ABI =
    '[{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"purchases","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IEscrow","name":"_escrow","type":"address"},{"internalType":"contract TestERC721Token","name":"_asset","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"purchase","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"purchaseID","type":"uint256"}],"name":"escrowHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
  public static Bytecode =
    "0x608060405234801561001057600080fd5b5060405161086938038061086983398101604081905261002f91610071565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100e4565b805161006b816100cd565b92915050565b6000806040838503121561008457600080fd5b60006100908585610060565b92505060206100a185828601610060565b9150509250929050565b600061006b826100c1565b600061006b826100ab565b6001600160a01b031690565b6100d6816100b6565b81146100e157600080fd5b50565b610776806100f36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638392fe3114610046578063d158b4e21461006f578063efef39a114610084575b600080fd5b61005961005436600461047b565b610097565b60405161006691906106ad565b60405180910390f35b61008261007d36600461047b565b6100b5565b005b61008261009236600461047b565b61019c565b600081815481106100a457fe5b600091825260209091200154905081565b6001546001600160a01b031633146100e85760405162461bcd60e51b81526004016100df9061066b565b60405180910390fd5b6100f06103f4565b600082815481106100fd57fe5b600091825260209182902060408051938401815291015480835260025460015492516340c10f1960e01b81529394506001600160a01b03908116936340c10f199361014e9392169190600401610649565b600060405180830381600087803b15801561016857600080fd5b505af115801561017c573d6000803e3d6000fd5b505050506000828154811061018d57fe5b60009182526020822001555050565b6101a4610407565b6101ad826102bb565b604080516020810182528481526000805460018101825590805290517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638201559051919250906060906102049083906024016106ad565b60408051601f198184030181529181526020820180516001600160e01b03166368ac5a7160e11b1790526001549051636a8573f560e11b81529192506001600160a01b03169063d50ae7ea906102629086903090869060040161067b565b602060405180830381600087803b15801561027c57600080fd5b505af1158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102b491908101906104a1565b5050505050565b6102c3610407565b6060826040519080825280602002602001820160405280156102ef578160200160208202803883390190505b5090506000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561034257600080fd5b505afa158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061037a91908101906104a1565b905060005b848110156103a95780820183828151811061039657fe5b602090810291909101015260010161037f565b50506040805160e0810182523380825260208201526002546001600160a01b0316918101919091526000606082018190526080820181905260a082015260c081019190915292915050565b6040518060200160405280600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b803561046a8161071c565b92915050565b805161046a8161071c565b60006020828403121561048d57600080fd5b6000610499848461045f565b949350505050565b6000602082840312156104b357600080fd5b60006104998484610470565b60006104cb8383610640565b505060200190565b6104dc816106ce565b82525050565b60006104ed826106c1565b6104f781856106c5565b9350610502836106bb565b8060005b8381101561053057815161051a88826104bf565b9750610525836106bb565b925050600101610506565b509495945050505050565b6000610546826106c1565b61055081856106c5565b93506105608185602086016106e2565b61056981610712565b9093019392505050565b6000610580601b836106c5565b7f6d7573742062652074686520657363726f7720636f6e74726163740000000000815260200192915050565b805160009060e08401906105c085826104d3565b5060208301516105d360208601826104d3565b5060408301516105e660408601826104d3565b5060608301516105f96060860182610640565b50608083015161060c6080860182610640565b5060a083015161061f60a0860182610640565b5060c083015184820360c086015261063782826104e2565b95945050505050565b6104dc816106df565b6040810161065782856104d3565b6106646020830184610640565b9392505050565b6020808252810161046a81610573565b6060808252810161068c81866105ac565b905061069b60208301856104d3565b8181036040830152610637818461053b565b6020810161046a8284610640565b60200190565b5190565b90815260200190565b60006001600160a01b03821661046a565b90565b60005b838110156106fd5781810151838201526020016106e5565b8381111561070c576000848401525b50505050565b601f01601f191690565b610725816106df565b811461073057600080fd5b5056fea365627a7a7231582043bd84ff670fdb7503fd9fc4fe42d6997cdec4121617c8c469003bd0645966da6c6578706572696d656e74616cf564736f6c634300050b0040";
}
