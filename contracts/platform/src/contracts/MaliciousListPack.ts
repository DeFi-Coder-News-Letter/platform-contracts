import {
  Contract,
  ContractFactory,
  ContractTransaction,
  EventFilter,
  Signer
} from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedFunctionDescription,
  TypedEventDescription
} from ".";

interface MaliciousListPackInterface extends Interface {
  functions: {
    purchases: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    maliciousPush: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;

    maliciousPull: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;

    pushAttackHook: TypedFunctionDescription<{
      encode([purchaseID]: [BigNumberish]): string;
    }>;

    emptyHook: TypedFunctionDescription<{ encode([]: []): string }>;

    pullAttackHook: TypedFunctionDescription<{
      encode([purchaseID]: [BigNumberish]): string;
    }>;
  };
  events: {};
}

export interface MaliciousListPack {
  interface: MaliciousListPackInterface;
  connect(signerOrProvider: Signer | Provider | string): MaliciousListPack;
  attach(addressOrName: string): MaliciousListPack;
  deployed(): Promise<MaliciousListPack>;
  on(event: EventFilter | string, listener: Listener): MaliciousListPack;
  once(event: EventFilter | string, listener: Listener): MaliciousListPack;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MaliciousListPack;
  removeAllListeners(eventName: EventFilter | string): MaliciousListPack;
  removeListener(eventName: any, listener: Listener): MaliciousListPack;

  purchases(arg0: BigNumberish): Promise<BigNumber>;
  maliciousPush(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  maliciousPull(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  pushAttackHook(
    purchaseID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  emptyHook(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  pullAttackHook(
    purchaseID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  estimate: {
    purchases(arg0: BigNumberish): Promise<BigNumber>;
    maliciousPush(count: BigNumberish): Promise<BigNumber>;
    maliciousPull(count: BigNumberish): Promise<BigNumber>;
    pushAttackHook(purchaseID: BigNumberish): Promise<BigNumber>;
    emptyHook(): Promise<BigNumber>;
    pullAttackHook(purchaseID: BigNumberish): Promise<BigNumber>;
  };
}

export class MaliciousListPack extends Contract {
  public static at(signer: Signer, addressOrName: string): MaliciousListPack {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.attach(addressOrName) as unknown) as MaliciousListPack;
  }

  public static deploy(
    signer: Signer,
    _escrow: string,
    _asset: string
  ): Promise<MaliciousListPack> {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.deploy(_escrow, _asset) as unknown) as Promise<
      MaliciousListPack
    >;
  }

  public static ABI =
    '[{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"purchases","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IEscrow","name":"_escrow","type":"address"},{"internalType":"contract TestERC721Token","name":"_asset","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"maliciousPush","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"maliciousPull","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"purchaseID","type":"uint256"}],"name":"pushAttackHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"emptyHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"purchaseID","type":"uint256"}],"name":"pullAttackHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
  public static Bytecode =
    "0x608060405234801561001057600080fd5b50604051610c9e380380610c9e83398101604081905261002f91610071565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100e4565b805161006b816100cd565b92915050565b6000806040838503121561008457600080fd5b60006100908585610060565b92505060206100a185828601610060565b9150509250929050565b600061006b826100c1565b600061006b826100ab565b6001600160a01b031690565b6100d6816100b6565b81146100e157600080fd5b50565b610bab806100f36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806325c4cc88146100675780635205fbd61461007c5780638392fe311461008f57806391931643146100b8578063d0020d85146100cb578063e35a7a10146100de575b600080fd5b61007a610075366004610861565b6100e6565b005b61007a61008a366004610861565b610205565b6100a261009d366004610861565b6103ed565b6040516100af9190610ad7565b60405180910390f35b61007a6100c6366004610861565b61040b565b61007a6100d9366004610861565b6105af565b61007a610675565b6100ee6107da565b6100f7826106a1565b604080516020810182528481526000805460018101825590805290517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56382015590519192509060609061014e908390602401610ad7565b60408051601f198184030181529181526020820180516001600160e01b0316632902fdeb60e11b1790526001549051636a8573f560e11b81529192506001600160a01b03169063d50ae7ea906101ac90869030908690600401610aa5565b602060405180830381600087803b1580156101c657600080fd5b505af11580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101fe9190810190610887565b5050505050565b6001546001600160a01b031633146102385760405162461bcd60e51b815260040161022f90610a75565b60405180910390fd5b610240610832565b6000828154811061024d57fe5b600091825260209182902060408051938401905201548152905061026f6107da565b815161027a906106a1565b60025483516040516340c10f1960e01b81529293506001600160a01b03909116916340c10f19916102b091309190600401610a5a565b600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b50506002546001805460405163a22cb46560e01b81526001600160a01b03938416955063a22cb4659450610319939091169190600401610a38565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b5050600154604051634e344acb60e01b81526001600160a01b039091169250634e344acb915061037d9084903090600401610a85565b602060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103cf9190810190610887565b50600083815481106103dd57fe5b6000918252602082200155505050565b600081815481106103fa57fe5b600091825260209091200154905081565b6001546001600160a01b031633146104355760405162461bcd60e51b815260040161022f90610a75565b61043d610832565b6000828154811061044a57fe5b600091825260209182902060408051938401905201548152905061046c6107da565b8151610477906106a1565b6040805160048082526024820183526020820180516001600160e01b0316630e35a7a160e41b1790526001549251636a8573f560e11b815293945090926001600160a01b039092169163d50ae7ea916104d69186913091879101610aa5565b602060405180830381600087803b1580156104f057600080fd5b505af1158015610504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105289190810190610887565b5060025460015484516040516340c10f1960e01b81526001600160a01b03938416936340c10f199361055f93911691600401610a5a565b600060405180830381600087803b15801561057957600080fd5b505af115801561058d573d6000803e3d6000fd5b505050506000848154811061059e57fe5b600091825260208220015550505050565b6105b76107da565b6105c0826106a1565b604080516020810182528481526000805460018101825590805290517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563820155905191925090606090610617908390602401610ad7565b60408051601f198184030181529181526020820180516001600160e01b0316639193164360e01b1790526001549051636a8573f560e11b81529192506001600160a01b03169063d50ae7ea906101ac90869030908690600401610aa5565b6001546001600160a01b0316331461069f5760405162461bcd60e51b815260040161022f90610a75565b565b6106a96107da565b6060826040519080825280602002602001820160405280156106d5578160200160208202803883390190505b5090506000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561072857600080fd5b505afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107609190810190610887565b905060005b8481101561078f5780820183828151811061077c57fe5b6020908102919091010152600101610765565b50506040805160e0810182523380825260208201526002546001600160a01b0316918101919091526000606082018190526080820181905260a082015260c081019190915292915050565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6040518060200160405280600081525090565b803561085081610b51565b92915050565b805161085081610b51565b60006020828403121561087357600080fd5b600061087f8484610845565b949350505050565b60006020828403121561089957600080fd5b600061087f8484610856565b60006108b18383610a2f565b505060200190565b6108c281610af8565b82525050565b60006108d382610aeb565b6108dd8185610aef565b93506108e883610ae5565b8060005b8381101561091657815161090088826108a5565b975061090b83610ae5565b9250506001016108ec565b509495945050505050565b6108c281610b03565b600061093582610aeb565b61093f8185610aef565b935061094f818560208601610b17565b61095881610b47565b9093019392505050565b600061096f601b83610aef565b7f6d7573742062652074686520657363726f7720636f6e74726163740000000000815260200192915050565b805160009060e08401906109af85826108b9565b5060208301516109c260208601826108b9565b5060408301516109d560408601826108b9565b5060608301516109e86060860182610a2f565b5060808301516109fb6080860182610a2f565b5060a0830151610a0e60a0860182610a2f565b5060c083015184820360c0860152610a2682826108c8565b95945050505050565b6108c281610b14565b60408101610a4682856108b9565b610a536020830184610921565b9392505050565b60408101610a6882856108b9565b610a536020830184610a2f565b6020808252810161085081610962565b60408082528101610a96818561099b565b9050610a5360208301846108b9565b60608082528101610ab6818661099b565b9050610ac560208301856108b9565b8181036040830152610a26818461092a565b602081016108508284610a2f565b60200190565b5190565b90815260200190565b600061085082610b08565b151590565b6001600160a01b031690565b90565b60005b83811015610b32578181015183820152602001610b1a565b83811115610b41576000848401525b50505050565b601f01601f191690565b610b5a81610b14565b8114610b6557600080fd5b5056fea365627a7a7231582008e4c046d81a1969243285e8275c03a7ab4ffd0867461d1f6140a3da277c1f416c6578706572696d656e74616cf564736f6c634300050b0040";
}
