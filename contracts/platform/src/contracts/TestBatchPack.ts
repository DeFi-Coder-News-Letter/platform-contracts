import {
  Contract,
  ContractFactory,
  ContractTransaction,
  EventFilter,
  Signer
} from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedFunctionDescription,
  TypedEventDescription
} from ".";

interface TestBatchPackInterface extends Interface {
  functions: {
    purchases: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    purchase: TypedFunctionDescription<{
      encode([count]: [BigNumberish]): string;
    }>;

    escrowHook: TypedFunctionDescription<{
      encode([purchaseID]: [BigNumberish]): string;
    }>;
  };
  events: {};
}

export interface TestBatchPack {
  interface: TestBatchPackInterface;
  connect(signerOrProvider: Signer | Provider | string): TestBatchPack;
  attach(addressOrName: string): TestBatchPack;
  deployed(): Promise<TestBatchPack>;
  on(event: EventFilter | string, listener: Listener): TestBatchPack;
  once(event: EventFilter | string, listener: Listener): TestBatchPack;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TestBatchPack;
  removeAllListeners(eventName: EventFilter | string): TestBatchPack;
  removeListener(eventName: any, listener: Listener): TestBatchPack;

  purchases(arg0: BigNumberish): Promise<BigNumber>;
  purchase(
    count: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;
  escrowHook(
    purchaseID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  estimate: {
    purchases(arg0: BigNumberish): Promise<BigNumber>;
    purchase(count: BigNumberish): Promise<BigNumber>;
    escrowHook(purchaseID: BigNumberish): Promise<BigNumber>;
  };
}

export class TestBatchPack extends Contract {
  public static at(signer: Signer, addressOrName: string): TestBatchPack {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.attach(addressOrName) as unknown) as TestBatchPack;
  }

  public static deploy(
    signer: Signer,
    _escrow: string,
    _asset: string
  ): Promise<TestBatchPack> {
    let factory = new ContractFactory(this.ABI, this.Bytecode, signer);
    return (factory.deploy(_escrow, _asset) as unknown) as Promise<
      TestBatchPack
    >;
  }

  public static ABI =
    '[{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"purchases","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IEscrow","name":"_escrow","type":"address"},{"internalType":"contract TestERC721Token","name":"_asset","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"name":"purchase","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"purchaseID","type":"uint256"}],"name":"escrowHook","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
  public static Bytecode =
    "0x608060405234801561001057600080fd5b506040516107f13803806107f183398101604081905261002f91610071565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100e4565b805161006b816100cd565b92915050565b6000806040838503121561008457600080fd5b60006100908585610060565b92505060206100a185828601610060565b9150509250929050565b600061006b826100c1565b600061006b826100ab565b6001600160a01b031690565b6100d6816100b6565b81146100e157600080fd5b50565b6106fe806100f36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638392fe3114610046578063d158b4e21461006f578063efef39a114610084575b600080fd5b610059610054366004610403565b610097565b6040516100669190610635565b60405180910390f35b61008261007d366004610403565b6100b5565b005b610082610092366004610403565b61019c565b600081815481106100a457fe5b600091825260209091200154905081565b6001546001600160a01b031633146100e85760405162461bcd60e51b81526004016100df906105f3565b60405180910390fd5b6100f061037c565b600082815481106100fd57fe5b600091825260209182902060408051938401815291015480835260025460015492516340c10f1960e01b81529394506001600160a01b03908116936340c10f199361014e93921691906004016105d1565b600060405180830381600087803b15801561016857600080fd5b505af115801561017c573d6000803e3d6000fd5b505050506000828154811061018d57fe5b60009182526020822001555050565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156101e157600080fd5b505afa1580156101f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102199190810190610429565b905081810161022661038f565b506040805160e081018252338082526020808301919091526002546001600160a01b031682840152600060608084018290526080840187905260a084018690528451828152808401865260c085015284519283018552878352815460018101835591805291517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56382015592519192916102c3908390602401610635565b60408051601f198184030181529181526020820180516001600160e01b03166368ac5a7160e11b1790526001549051636a8573f560e11b81529192506001600160a01b03169063d50ae7ea9061032190869030908690600401610603565b602060405180830381600087803b15801561033b57600080fd5b505af115801561034f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103739190810190610429565b50505050505050565b6040518060200160405280600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b80356103f2816106a4565b92915050565b80516103f2816106a4565b60006020828403121561041557600080fd5b600061042184846103e7565b949350505050565b60006020828403121561043b57600080fd5b600061042184846103f8565b600061045383836105c8565b505060200190565b61046481610656565b82525050565b600061047582610649565b61047f818561064d565b935061048a83610643565b8060005b838110156104b85781516104a28882610447565b97506104ad83610643565b92505060010161048e565b509495945050505050565b60006104ce82610649565b6104d8818561064d565b93506104e881856020860161066a565b6104f18161069a565b9093019392505050565b6000610508601b8361064d565b7f6d7573742062652074686520657363726f7720636f6e74726163740000000000815260200192915050565b805160009060e0840190610548858261045b565b50602083015161055b602086018261045b565b50604083015161056e604086018261045b565b50606083015161058160608601826105c8565b50608083015161059460808601826105c8565b5060a08301516105a760a08601826105c8565b5060c083015184820360c08601526105bf828261046a565b95945050505050565b61046481610667565b604081016105df828561045b565b6105ec60208301846105c8565b9392505050565b602080825281016103f2816104fb565b606080825281016106148186610534565b9050610623602083018561045b565b81810360408301526105bf81846104c3565b602081016103f282846105c8565b60200190565b5190565b90815260200190565b60006001600160a01b0382166103f2565b90565b60005b8381101561068557818101518382015260200161066d565b83811115610694576000848401525b50505050565b601f01601f191690565b6106ad81610667565b81146106b857600080fd5b5056fea365627a7a72315820f95374f02efc83028202538fe2f0035de769010c28376313ef711c76a1e5a5a36c6578706572696d656e74616cf564736f6c634300050b0040";
}
